module std

import std.{List, Map, math}

trait Comparable is Eq where
  fn compareTo(other: T): Compare

enum Shape where
  Circle(int)
  Square(int)
  Rectangle(int, int)

record Cat(name: str, age:  int) =
  `A cat is new a new type of animal

  static fn withName(name: str): Cat =
    Cat(name: name, age: 0)

  fn fullname(): str =
    name + age.toStr()

  fn talk() =
    printLn("cat ${name} says meow")

  override fn toStr(): str =
    "Cat<${fullname()}, ${age}>"

  override fn plus(other: Cat) Cat =
    Cat(...self, age: self.age + other.age)

  override fn toStr() str =
    "Cat<${fullname()}, ${age}>"

record Response(
  body: Buffer
  headers: Map[str, str]
  status: int
) where
  fn init()
    body = Buffer()
    headers = Map[str, str]()
    status = 0

  fn header(kv Pair): Self =
    headers.add(kv)

  fn body(b Buffer): Self =
    body = b

  fn status(v int): Self =
    status = v

#[get("/posts")]
fn handleRequest(req: Request): Response =
  Response()
    .status(2)
    .body("213")
    .headers("1" => "2")

fn hasFlag(b: bool, d: List) =
  return data

fn iterate() =
  for i := range items
    if i == 5
      continue
    if i == 10
      break

`Option is a type that represents either value present Some or nothing present
enum Option[T] where
  | None
  | Some(T)

  fn isNone(): Option[T] =
    match self
      None -> true
      Some(t) -> false

  fn isSome(): Option[T] =
    !self.isNone()

  fn get(): T =
    match self
      Some(val) -> val
      None -> fail("called 'option.get()' on a 'none' value")

  fn getOrElse(default: T): T =
    `get if present otherwise return default value
    match self
      Some(val) -> val
      None -> d

  fn toStr(): str =
    match self
      Some(v) -> v.toStr()
      None -> "none"

trait RangebleV where
  fn rangeV[V](yield: fn(V): bool): bool

trait RangebleKV where  
  fn rangeKV[K, V](yield: fn(K, V): bool): bool

record Tree[E](
  value: E
  left: Option[Tree] = None
  right: Option[Tree] = None
) where
  fn rangeV(yld: fn(E): bool): bool =
    t.left?.rangeV(yld) && yld(t.val) && t.right?.rangeV(yld)

let tree = Tree(
  value: 10,
  left: Tree(20, Tree(30), Tree(39)),
  right: Tree(40),
)

for t := range tree:
  printLn(v)
